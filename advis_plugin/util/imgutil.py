"""
Utility methods for dealing with images and image tensors.
"""

import imghdr
from PIL import Image
from io import BytesIO

_IMGHDR_TO_MIMETYPE = {
	'bmp': 'image/bmp',
	'gif': 'image/gif',
	'jpeg': 'image/jpeg',
	'png': 'image/png'
}

_DEFAULT_IMAGE_MIMETYPE = 'application/octet-stream'

def get_content_type(image):
	"""Analyze image data and return its content mime type.

	Arguments:
		image: The image data whose content type we want to know.
	Returns:
		The given image's mime type.
	"""
	
	return _IMGHDR_TO_MIMETYPE.get(
		imghdr.what(None, image),
		_DEFAULT_IMAGE_MIMETYPE
	)

def blend_images(images):
	result = Image.open(BytesIO(images[0]))
	
	for i in range(1, len(images)):
		result = Image.blend(
			result,
			Image.open(BytesIO(images[i])),
			1.0 / len(images)
		)
	
	with BytesIO() as byte_array:
		result.save(byte_array, 'PNG')
		output_array = byte_array.getvalue()
	
	return output_array

def get_placeholder_image():
	"""Get a placeholder for images that have not been found.
	
	Returns:
		A byte literal containing the placeholder image.
	"""
	
	return b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00@\x00\x00\x00@\x08\x06\x00\x00\x00\xaaiq\xde\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x01\xe2IDATx\x01\xedZ\xedm\x840\x0cM\xaa\x0e\xd0]\x925\xba\x06\xac\xc1\x1a\xb0F\xd7\x80]\xba\x01\xc5\xb9s\x0eZj\xfc\x838RlK(\x1f\xb6 \xef\xf99pp~\x1c\xc7\xd5)\xb67\xc5\xd8\x13\xf4w$\xa0\xeb:\xec\xaah\xa7iJ8\xd5+\xc0\x08P\xa1w\x02\xa4)\x80 G\x85\xcb\x14\xa0"\xcd\x04HS\x00A\x8e\n\x97)@E\x9a\t\x90\xa6\x00\x82\x1c\x15.S\x80\x8a4\x13 M\x01\x049*\\\xa6\x00\x15i&@\x9a\x02\x08rT\xb8D\x14\xe0\xbdw\x9c\x03\xdf\xd4J2/B\x00\x00Z\xd7\xf5\xf2\x808i\x12\xf2w\x01\xb8xi[\x96\xe5\xf2\x12\xf0}\x02H\x90\xfaN!\xa6\x80\xdf\xc8\xe3Wtp\x9c\x19\x92p\xe6\xbb{\xae\n\x01\t\xf8\xf0\x80\x12\xe3\x8b\x84\xbe\xef\xf3^\x01}\t\x13-\x81\x03\xa0\xe10J\x83y\x9eS\x1bBHD\xfc\x8d\xb8\x7f\xa6\n\x01\xf3\xe7\xec0\xf3\x08\xfa~h\xbc3V!\x00\x96\xb6\x07\x1ec\xd8\xad\xd6\xe7\xbb\xc5n\xb2XW|\x0f\x08\xbb\x9a?\xa0\xfa>\x8c\xc4\x06\x15\x14\xb0\xba\x10\xbd[\xb6z\x87Z\xcf\xf6\x01\xbd!e?\xcf\tt*\x10\x00\xa8\x1e$lh\x9f\x10}j\xe1a\t\r\x9e\x1c\xf7c\x9c\xbf\xbb\x15/\x81\x17\x80\r\xec\x06\x12\x0c\x9f\x12\xa1\xcfyX\x82\xb8\xbbL\\\x01\xdb\xaf\x82\xbcv\x89\x0c\xe7\x8b\xfd\xd3\x11\'\x00v\xffC\xed?\x17&\x9dy\xe4C\x94\x803\xe0\xb8\x10\xca\x871%Z1\x02\xa8M\r|\xb5L\x84\x80\xabZ\xbf\xf2\x97$\xa7\xe2]\xa0$,\xfe\xb9\x8d\x00>WmF\x9a\x02\xda\xcc+\x1f\x95)\x80\xcfU\x9b\x91\xa6\x806\xf3\xcaGe\n\xe0s\xd5f\xa4)\xa0\xcd\xbc\xf2Q\x99\x02\xf8\\\xb5\x19i\nh3\xaf|T\xa6\x00>WmF\x9a\x02\xda\xcc+\x1fU~+,\xfd\xe7$\xfe\x12\xcbF\xaa/\x81\x1f\xa0\xdewz\xf7\x15\xf3\xd8\x00\x00\x00\x00IEND\xaeB`\x82'
